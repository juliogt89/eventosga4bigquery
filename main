import os
import pyodbc
from google.cloud import bigquery

# Establecer la variable de entorno GOOGLE_APPLICATION_CREDENTIALS
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = 'rutadetuscredencialesjson.json'

# Crea un cliente de BigQuery
client = bigquery.Client()

# Configura la conexión a SQL Server
server = 'tuservidor3'
database = 'tubasededatos'
username = 'tuusuario'
password = 'tucontraseña'
connection_string = f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}'
conn = pyodbc.connect(connection_string)
cursor = conn.cursor()

def ejecutar_consulta_por_dia(fecha):
    sql_query = f"""(tu query de bigquery) """ 
    # en el nombre de la tabla colocar la variable _{fecha} (al final del nombre de tu tabla de bigquery particionada tablaga4.ga4.events_{fecha})donde el parametro fecha es de acuerdo a las fechas de tus tablas particionadas
    try:
        # Ejecuta la consulta
        query_job = client.query(sql_query)

        # Lista para almacenar los resultados como diccionarios
        results = []

        # Recorre los resultados de la consulta
        for row in query_job:
            # Convierte cada fila en un diccionario serializable
            result_dict = dict(row)
            results.append(result_dict)

        return results
    except Exception as e:
        print(f'Error al ejecutar la consulta: {str(e)}')
        return []

def guardar_resultados_por_dia(resultados_por_dia):
    for fecha, resultados in resultados_por_dia.items():
        if resultados:
            columnas = resultados[0].keys()

            # Modifica esta parte para insertar en la base de datos SQL Server
            for resultado in resultados:
                
                
                # Crear una tabla en la base de datos si aún no existe
                create_table_query = f"IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'nombredelatablaacrearensqlserver') "
                create_table_query += "CREATE TABLE nombredelatablaacrearensqlserver ("
                create_table_query += ', '.join([f'{col} NVARCHAR(MAX)' for col in columnas])
                create_table_query += ");"
                cursor.execute(create_table_query)

                # Insertar los datos en la tabla
                insert_query = f"INSERT INTO nombredelatablaacrearensqlserver ({', '.join(columnas)}) VALUES ("
                insert_query += ', '.join(['?' for _ in columnas])
                insert_query += ");"
                cursor.execute(insert_query, tuple(str(value) for value in resultado.values()))

            conn.commit()  # Guardar los cambios en la base de datos

            print(f'Los datos del {fecha} se han insertado en la base de datos SQL Server')

# Definir rango de fechas a procesar
fechas_a_procesar = ['20231002','20231003','20231004''20231005']  # Agrega las fechas que necesites

resultados_por_dia = {}

for fecha in fechas_a_procesar:
    resultados = ejecutar_consulta_por_dia(fecha)
    resultados_por_dia[fecha] = resultados

guardar_resultados_por_dia(resultados_por_dia)

# Cierra la conexión a la base de datos al final del script
conn.close()
